# Print the project root
_decompose-process-project-root() {
  local project_root; _decompose-project-root project_root; echo $project_root
}
_decompose-process-project-root_help() {
  echo "  Print project root directory"
}

# Include common processes
source $(_decompose-process-project-root)/.decompose/environment/lib/web/processes

# Declare processes
DECOMPOSE_PROCESSES=( 'explore' 'dc' 'build' 'up'
  'generate_self_signed_certs' 'import_db' 'explore_db' 'import_files'
  'project-root' 'backup_config'
  "${DECOMPOSE_WEB_PROCESSES[@]}" )

_decompose-process-explore() {
  echo "Entering PHP container clone..."
  echo "docker-compose -f $dc_config_file run --rm php /bin/bash"
}
_decompose-process-explore_help() {
  echo "  Explore!"
}

_decompose-process-explore_db() {
  # Get the name of the database container
  db_container_name=$(docker-compose ps -q db)

  # Enter mysql
  docker exec -it $db_container_name bash -c "export TERM=dumb; mysql -u app_user -ppassword -D app"
}
_decompose-process-explore_db_help() {
  echo "  Explore database"
}

_decompose-process-dc() {
  echo 'docker-compose -f $dc_config_file "$@"'
}
_decompose-process-dc_help() {
  echo "  Run docker compose in the current environment ($PROJECT_ENVIRONMENT)"
}

_decompose-process-build() {
  # TODO: Generate SSL certificates if they don't already exist.
  #echo 'TODO: Generate SSL certs for testing'
  # TODO: Rebuild source for production
  # TODO: Build remaining docker-compose containers

  decompose-process-templates 
  docker-compose build
}
_decompose-process-build_help() {
  echo "  Build the project"
}

_decompose-process-up() {
  docker-compose up -d
}
_decompose-process-up_help() {
  echo "  Start project locally"
}

_decompose-process-generate_self_signed_certs() {
  local project_root; _decompose-project-root project_root
  mkdir $project_root/certs
  openssl req -nodes -x509 -newkey rsa:4096 -keyout $project_root/certs/server.key -out $project_root/certs/server.crt -days 356
}
_decompose-process-generate_self_signed_certs_help() {
  echo "  Generate self signed tls certifications"
}

_decompose-process-import_db() {
  # Verify the the first parameter is a file
  echo "TODO!!"
  #local sql_file=$1
  #if [ ! -e "$sql_file" ]; then
  #  echo "File '$sql_file' does not exist"
  #  exit 1
  #fi

  ## Get the name of the database container
  #db_container_id=$(docker-compose ps -q db)

  ## Copy file to container /tmp
  #docker cp $sql_file $db_container_id:/tmp

  ## Import file
  #docker exec $db_container_id bash -c "export TERM=dumb; mysql -u app_user -ppassword -D app < /tmp/$sql_file"

  ## Delete /tmp file
  #docker exec $db_container_id rm /tmp/$sql_file
}
_decompose-process-import_db_help() {
  echo "  TODO: Import DB passed in as a parameter 1"
}

_decompose-process-import_files() {
  # Verify the the first parameter is a file
  echo "TODO!!"
  #local directory=$1
  #if [ ! -d "$directory" ]; then
  #  echo "Directory '$directory' does not exist"
  #  exit 1
  #fi

  ## Get the name of the database container
  #php_container_name=$(docker-compose ps -q php)

  ## Copy directory to container
  #docker cp $directory/. $php_container_name:/srv/http/source/app/webroot/img/uploads
}
_decompose-process-import_uploads_help() {
  echo "  TODO: Copies 'files' directory to the php container"
}



_decompose-process-backup_config() {
  echo "TODO!!"
  #echo "Backing up config..."
  #local project_root; _decompose-project-root project_root

  #local string_time=$(date +%s)
  #local config_name=$PROJECT_NGINX_VIRTUAL_HOST_PROD
  #local asc_files=$(cd "$project_root";\
  #  echo ./containers/backup/.duply/site_data/*.asc)

  #mkdir -p "$project_root"/backup_config
  #tar -C "$project_root" \
  #  -cvzf "$project_root"/backup_config/$config_name-config-$string_time".tar.gz" \
  #  --exclude="*.git" \
  #  ./.decompose \
  #  ./containers/backup/.ssh \
  #  $asc_files
}
_decompose-process-backup_config_help() {
  local project_root; _decompose-project-root project_root
  echo "  TODO: Creates backup file of the current configuration for safe keeping"
  echo "  File is copied to '$project_root/backup_config' directory"
}


# vim:syntax=sh
